{"version":3,"sources":["Components/HomeTab.js","Components/Shifts.js","Library/Caesar.js","Components/CaesarTab.js","Components/Output.js","Components/CipherForm.js","Components/ModeButton.js","Library/Monoalpha.js","Components/MonoalphaTab.js","Library/Vigenere.js","Components/VigenereTab.js","Components/PlayfairSquare.js","Library/Playfair.js","Components/PlayfairTab.js","Components/Monograph.js","Components/HorizontalFrequencyGraph.js","Library/Tools.js","Components/FrequencyAnalysis.js","Components/IOC.js","Components/ToolsTab.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["HomeTab","Component","render","Container","Shifts","Table","responsive","size","this","props","shifts","map","shift","index","key","toString","Form","Control","as","rows","plaintext","value","readOnly","str","shiftNum","toUpperCase","i","length","charCodeAt","charCode","String","fromCharCode","charAt","CaesarTab","constructor","super","handleChange","bind","state","input","e","setState","target","push","getShifts","fluid","Group","controlId","Label","onChange","placeholder","Text","className","id","Output","text","CipherForm","keywordId","type","keywordChangeHandler","inputId","textChangeHandler","ModeButton","handleClick","modeChange","Button","variant","onClick","mode","getCipherAlphabet","keyword","letters","match","regAlpha","cipherAlpha","indexOf","replace","getOldToNewAlphabetHash","hash","MonoalphaTab","getOutput","output","document","getElementById","oldToNewHash","toLowerCase","monoalphabeticCipher","vigenereCipher","oldToNewAlphasHashes","cipherAlphas","hashes","getOldToNewHashes","alpha","getCipherAlphabets","pos","VigenereTab","mode_change","PlayfairSquare","handleCellChange","striped","bordered","createTableRow","square","row","squareCase","rowA","colA","rowB","colB","rowCase","colCase","col","createSquare","letterToReplace","j","PlayfairTab","replacement","rowHash","colHash","createHash","splice","formatText","playfairCipher","read_only","Monograph","data","letterFreqs","freqs","count","Object","values","reduce","accumulator","currentValue","labels","keys","sort","datasets","label","backgroundColor","borderWidth","borderColor","hoverBorderWidth","hoverBorderColor","formatData","options","title","display","scales","xAxes","barPercentage","barThickness","maxBarThickness","minBarLength","gridLines","offsetGridLines","scaleLabel","labelString","yAxes","HorizontalFrequencyGraph","frequencies","a","b","forEach","item","chartOptions","yLabel","getIthLetterFrequencies","k","indexOfCoincidence","ioc","current","FrequencyAnalysis","handleSubmit","letFreq","diFreq","triFreq","l","monograms","digrams","trigrams","letterFrequencyAnalysis","IOC","iocs","freq","accum","currentVal","calculateIndexOfCoincidences","iocDiffs","sortedLengths","Math","abs","ListGroup","Item","ToolsTab","href","Accordion","Card","Toggle","Header","eventKey","Collapse","Body","Navbar","Tabs","defaultActiveKey","Tab","App","Boolean","window","location","hostname","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7cdca5a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nclass HomeTab extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <br/>\r\n        <h1>What Are Ciphers?</h1>\r\n        <p>\r\n        A cipher is an algorithm for encrypting or decrypting a message. There\r\n        are many different types of ciphers, some more classical and others more\r\n        modern. Currently we have some of the more common simple classical ciphers.\r\n        </p>\r\n        <br/>\r\n        <h5>Common Classical Types</h5>\r\n        <ul>\r\n          <li>Substitution Ciphers (monoalphabetic)</li>\r\n          <li>Polyalphabetic Ciphers</li>\r\n          <li>Transposition Ciphers</li>\r\n        </ul>\r\n        <br/>\r\n        <h5>Resources</h5>\r\n        <p>\r\n        'The Code Book: The Science of Secrecy from Ancient Egypt to Quantum Cryptography'\r\n        by Simon Singh is an excellent resource to learn about Cryptography and its history.\r\n        </p>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default HomeTab;\r\n","import React, {Component} from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n\r\nclass Shifts extends Component {\r\n  render() {\r\n    return (\r\n      <Table responsive='md' size='xl'>\r\n        <thead>\r\n          <tr>\r\n            <th>Shifted by</th>\r\n            <th>Result</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {displayShifts(this.props.shifts)}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n// Displays all given shifts\r\n//  shifts: An array of strings\r\n//  @Returns: HTML of table rows filled with data from shifts\r\nfunction displayShifts(shifts) {\r\n  return shifts.map(function(shift, index) {\r\n    return (\r\n      <tr key={'shift-' + index.toString()}>\r\n        <td>{index + 1}</td>\r\n        <td><Form.Control as='textarea' rows='2' plaintext value={shift} readOnly /></td>\r\n      </tr>\r\n    );\r\n  });\r\n}\r\n\r\nexport default Shifts;\r\n","  //Gets all possible 25 useful shifts of the given input\r\n  //  input: Given string of input\r\n  //  @Returns:\r\n  //    shifts: An array of strings. All possible 25 useful shifts of the given input\r\n  function getShifts(input){\r\n    var shifts = [];\r\n    for(var i=1; i<26; i++){\r\n      shifts.push(shift(input, i));\r\n    }\r\n    return shifts;\r\n  }\r\n\r\n  //Shift the letters in the string by given number\r\n  //  str: string to shift\r\n  //  shiftNum: number to shift alphabet by (1-25)\r\n  //  @Returns:\r\n  //    shift: A string. str with letters shifted according to shiftNum\r\n  function shift(str, shiftNum){\r\n    str = str.toUpperCase();\r\n    var shift = '';\r\n    for(var i=0; i<str.length; i++){\r\n      //Char Code 65 = 'A', Char Code 90 = 'Z'\r\n      if(str.charCodeAt(i) >= 65 && str.charCodeAt(i) <= 90){ // If character not in alphabet, do not change.\r\n        var charCode =  str.charCodeAt(i) + shiftNum;\r\n        if (charCode > 90) charCode -= 26;\r\n        shift += String.fromCharCode(charCode);\r\n      }\r\n      else{\r\n        shift += str.charAt(i);\r\n      }\r\n    }\r\n    return shift;\r\n  }\r\n\r\n  export { getShifts, shift }\r\n","import React, {Component} from 'react';\r\nimport Shifts from './Shifts';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport {getShifts} from '../Library/Caesar';\r\n\r\nclass CaesarTab extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {input: ''};\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({input: e.target.value});\r\n  }\r\n\r\n  render() {\r\n    const shifts = getShifts(this.state.input);\r\n    return (\r\n      <Container fluid>\r\n        <Container>\r\n          <h1>Caesar Shift Cipher</h1>\r\n          <p>\r\n          A Caesar cipher is a very simple substituion cipher. It is done by shifting the\r\n          whole alphabet by a certain amount and then using that alphabet to encrypt/decrypt the message.\r\n          For example, if we were to encrypt the message \"A dog jumped over the fence.\" with a shift\r\n          of 5, the encrypted message would be \"F ITL OZRUJI TAJW YMJ KJSHJ.\".\r\n          </p>\r\n          <h5>Encrypting/Decrypting</h5>\r\n          <Form.Group controlId='caesar-input'>\r\n            <Form.Label>Enter text to see shifts:</Form.Label>\r\n            <Form.Control as='textarea' rows='3' onChange={this.handleChange} placeholder='Enter Text'/>\r\n            <Form.Text className='text-muted'>\r\n              Any characters that are not alphabetical will be ignored and unchanged!\r\n            </Form.Text>\r\n          </Form.Group>\r\n          <Container className='output-shifts'>\r\n            <h2 className='center'>Shifts</h2>\r\n            <div id='caesar-output'>\r\n              <Shifts shifts={shifts}/>\r\n            </div>\r\n          </Container>\r\n        </Container>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CaesarTab;\r\n","import React, {Component} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass Output extends Component {\r\n  render() {\r\n    return (\r\n      <Container className='output'>\r\n        <h2 className='center'>Output</h2>\r\n        <div id={this.props.id}>\r\n          {this.props.text &&\r\n            <Form.Control as='textarea' rows='2' plaintext value={this.props.text} readOnly />\r\n          }\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Output;\r\n","import React, {Component} from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass CipherForm extends Component {\r\n  render() {\r\n    return (\r\n      <Form>\r\n        <Form.Group controlId={this.props.keywordId}>\r\n          <Form.Label>Keyword:</Form.Label>\r\n          <Form.Control type='keyword' onChange={this.props.keywordChangeHandler} placeholder='Enter keyword'/>\r\n          <Form.Text className='text-muted'>\r\n            Keyword is needed!\r\n          </Form.Text>\r\n        </Form.Group>\r\n        <Form.Group controlId={this.props.inputId}>\r\n          <Form.Label/>\r\n          <Form.Control as='textarea' rows='3' onChange={this.props.textChangeHandler} placeholder='Enter Text'/>\r\n          <Form.Text className='text-muted'>\r\n            Any characters that are not alphabetical will be ignored and unchanged!\r\n          </Form.Text>\r\n        </Form.Group>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CipherForm;\r\n","import React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass ModeButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(e) {\r\n    this.props.modeChange(e);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Button type='button' variant='primary' onClick={this.handleClick}>\r\n        {(this.props.mode === 0) ? 'Encrypting' : 'Decrypting'}\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModeButton;\r\n","  //Performs monoalphabetic substituion.\r\n  //  keyword: String of letters used to create new alphabet to perform substituion.\r\n  //  text: String to encrypt/decrypt.\r\n  //  @Returns:\r\n  //    output: Given text that has been substituted based on the keyword given.\r\n  function monoalphabeticCipher(keyword, text, mode=0){\r\n    var output = ''\r\n    var oldToNewHash = getOldToNewAlphabetHash(getCipherAlphabet(keyword), mode);\r\n    text = mode ? text.toUpperCase() : text.toLowerCase();\r\n    for(var i=0; i<=text.length; i++){\r\n      if(text.charAt(i).match(/[a-zA-Z]/)) output += oldToNewHash[text.charAt(i)];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  //Creates cipher alphabet from keyword.\r\n  //Cipher alphabet is constructed removing any repetitions in keyword and adding any missing letters to the end\r\n  //in the order they appear in the normal alphabet.\r\n  //  keyword: String of letters used to create new alphabetic to perform substituion.\r\n  //  @Returns:\r\n  //    cipherAlpha: Cipher alphabet constructed using keyword.\r\n  function getCipherAlphabet(keyword){\r\n    var letters = keyword.toUpperCase().match(/[A-Z]/g); //ignore any other characters beside a-z.\r\n    var regAlpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    var cipherAlpha = '';\r\n\r\n    if(letters){\r\n      var i = 0;\r\n      while (i < letters.length && cipherAlpha.length !== 26) {\r\n        if(cipherAlpha.indexOf(letters[i]) < 0) {\r\n          cipherAlpha += letters[i];\r\n          regAlpha = regAlpha.replace(letters[i], '');\r\n        }\r\n        i++;\r\n      }\r\n    }\r\n    if(cipherAlpha.length < 26) cipherAlpha += regAlpha; //Fill rest of new alphabet with remaining letters.\r\n    return cipherAlpha;\r\n  }\r\n\r\n  //Creates hashmap linking the old alphabet to the new, for ease of replacing text.\r\n  //  keyword: String of letters used to create new alphabetic to perform substituion.\r\n  //  mode: Integer of one or zero. 0: Encrypt, 1: Decrypt.\r\n  //  @Returns:\r\n  //    hash: Maps old to new alphabet\r\n  function getOldToNewAlphabetHash(cipherAlpha, mode=0){\r\n    var regAlpha = 'abcdefghijklmnopqrstuvwxyz';\r\n    var hash = {};\r\n\r\n    for(var i=0; i<cipherAlpha.length; i++){\r\n      mode ? hash[cipherAlpha.charAt(i)] = regAlpha.charAt(i) : hash[regAlpha.charAt(i)] = cipherAlpha.charAt(i);\r\n    }\r\n    return hash;\r\n  }\r\n\r\n  export{monoalphabeticCipher, getCipherAlphabet, getOldToNewAlphabetHash}\r\n","import React, {Component} from 'react';\r\nimport Output from './Output';\r\nimport Container from 'react-bootstrap/Container';\r\nimport CipherForm from './CipherForm';\r\nimport ModeButton from './ModeButton';\r\nimport {monoalphabeticCipher} from '../Library/Monoalpha';\r\n\r\nclass MonoalphaTab extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.modeChange = this.modeChange.bind(this);\r\n    this.getOutput = this.getOutput.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      mode: 0,\r\n      output: '',\r\n    };\r\n  }\r\n\r\n  modeChange(e) {\r\n    (this.state.mode === 0) ? this.setState({mode: 1}) : this.setState({mode: 0});\r\n  }\r\n\r\n  getOutput() {\r\n    let output = '';\r\n    if (document.getElementById('monoalpha-input') != null && document.getElementById('monoalpha-keyword') != null) {\r\n      const input = document.getElementById('monoalpha-input').value;\r\n      const keyword = document.getElementById('monoalpha-keyword').value;\r\n      if (keyword.match(/[a-zA-Z]/) && input.match(/[a-zA-Z]/)) {// Won't do anything unless both have some sort of input. Make sure inputs have alphabetical components.\r\n        output = monoalphabeticCipher(keyword, input, this.state.mode);\r\n      }\r\n    }\r\n    return output;\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({output: ''}); // Needed to rerender output when change occurs.\r\n  }\r\n\r\n  render() {\r\n    const mode = this.state.mode;\r\n    const output = this.getOutput(); // Needed to sync with button press\r\n    return (\r\n      <Container>\r\n        <h1>Monoalphabetic Cipher</h1>\r\n        <p>\r\n        A monoalphabetic cipher is a substituion cipher. It is done by creating a cipher alphabet\r\n        based on a keyword.\r\n        </p>\r\n        <p>\r\n        This cipher alphabet is created by removing any duplicates after the\r\n        first appearance of a letter and adding all other letters not included in the keyword to the end.\r\n        For example, If the keyword was \"Cryptology\", the resulting cipher alphabet would be \"CRYPTOLGABDEFHJKMNPQSUVWXZ\".\r\n        </p>\r\n        <p>\r\n        When encrpyting/decrypting we substitute the original letter with the corresponding alphabet.\r\n        For example, using the same keyword as before, \"They've caught on!\" would be encrpyted as \"QGTXUTYCSLGQIH\", while\r\n        \"SHPTMNQIIP\" would be decrypted as \"understood\".\r\n        </p>\r\n        <h5>Encrypting/Decrypting</h5>\r\n        <CipherForm keywordId='monoalpha-keyword' keywordChangeHandler={this.handleChange} inputId='monoalpha-input' textChangeHandler={this.handleChange} />\r\n        <ModeButton mode={mode} modeChange={this.modeChange} />\r\n        <br/><br/>\r\n        <Output id='monoalpha-output' text={output}/>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MonoalphaTab;\r\n","import {getOldToNewAlphabetHash} from './Monoalpha';\r\nimport {shift} from './Caesar';\r\n  //Performs Vignere substituion.\r\n  //  keyword: String of letters used to create new alphabets to perform substituion.\r\n  //  text: String to encrypt/decrypt.\r\n  //  Mode indicates whether to encrypt or decrypt. 0: Encrypt, 1:Decrypt\r\n  //  @Returns:\r\n  //    output: Given text that has been substituted based on the keyword given.\r\n  function vigenereCipher(keyword, text, mode=0){\r\n    var output = '';\r\n    var oldToNewAlphasHashes = getOldToNewHashes(getCipherAlphabets(keyword), mode);\r\n    var pos = 0; //Used to track current cipher alpha we're using.\r\n    if(oldToNewAlphasHashes){\r\n      text = mode ? text.toUpperCase() : text.toLowerCase(); // Cipher text is usually upper case. Plain text is usually lower case.\r\n      for(var i=0; i<text.length; i++){\r\n        if(text.charAt(i).match(/[a-zA-Z]/)){\r\n          output += oldToNewAlphasHashes[pos][text.charAt(i)];\r\n          ((pos + 1) < oldToNewAlphasHashes.length) ? pos++ : pos = 0; // Wraps back to beginning\r\n        }\r\n      }\r\n    }\r\n    return output;\r\n  }\r\n\r\n  //Creates cipher alphabets from keyword to use for vigenere cipher.\r\n  //Each cipher alphabet is constructed by shifting the regular alphabet so that the current letter is the first letter.\r\n  //  keyword: String of letters used to create new alphabets to perform substituion.\r\n  //  @Returns:\r\n  //    cipherAlphas: An array of strings containing the cipher alphabets.\r\n  function getCipherAlphabets(keyword){\r\n    var letters = keyword.toUpperCase().match(/[A-Z]/g); //ignore any other characters beside a-z.\r\n    var alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    var cipherAlphas = [];\r\n    if(letters){\r\n      for(var i=0; i<letters.length; i++){\r\n        cipherAlphas.push(shift(alpha, alpha.indexOf(letters[i])));\r\n      }\r\n    }\r\n    return cipherAlphas;\r\n  }\r\n\r\n  //Creates an array of hashes that are used to encode/decode text.\r\n  //  cipherAlphas: Array of Strings. Each is a cipher alphabet\r\n  //  @Returns:\r\n  //    hashes: Array of hashes.\r\n  function getOldToNewHashes(cipherAlphas, mode=0){\r\n    var hashes = [];\r\n    if(cipherAlphas){\r\n      for(var i=0; i<cipherAlphas.length; i++){\r\n        hashes.push(getOldToNewAlphabetHash(cipherAlphas[i], mode));\r\n      }\r\n    }\r\n    return hashes;\r\n  }\r\n\r\n  export { vigenereCipher }\r\n","import React, {Component} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport CipherForm from './CipherForm';\r\nimport ModeButton from './ModeButton';\r\nimport Output from './Output';\r\nimport {vigenereCipher} from '../Library/Vigenere';\r\n\r\nclass VigenereTab extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.modeChange = this.modeChange.bind(this);\r\n    this.getOutput = this.getOutput.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      mode: 0,\r\n      output: '',\r\n    };\r\n  }\r\n\r\n  modeChange(e) {\r\n    (this.state.mode === 0) ? this.setState({mode: 1}) : this.setState({mode: 0});\r\n  }\r\n\r\n  getOutput() {\r\n    let output = '';\r\n    if (document.getElementById('vigenere-input') != null && document.getElementById('vigenere-keyword') != null) {\r\n      const input = document.getElementById('vigenere-input').value;\r\n      const keyword = document.getElementById('vigenere-keyword').value;\r\n      if (keyword.match(/[a-zA-Z]/) && input.match(/[a-zA-Z]/)) {// Won't do anything unless both have some sort of input. Make sure inputs have alphabetical components.\r\n        output = vigenereCipher(keyword, input, this.state.mode);\r\n      }\r\n    }\r\n    return output;\r\n  }\r\n\r\n  handleChange(e, mode_change) {\r\n    this.setState({output: ''}); // Needed to rerender output when change occurs.\r\n  }\r\n\r\n  render() {\r\n    const mode = this.state.mode;\r\n    const output = this.getOutput(); // Needed to sync with button press\r\n    return (\r\n      <Container>\r\n        <h1>Vigenere Cipher</h1>\r\n        <p>\r\n        A Vigenere cipher is polyalphabetic cipher that encorporates shifts of a caesar cipher.\r\n        </p>\r\n        <p>\r\n        The keyword is used to construct the alphabets, each letter uses the shift of the alphabet that\r\n        the letter starts with. Also it should be noted that duplicate letters are not removed as they\r\n        are in monoalphabetic substituion ciphers.\r\n        </p>\r\n        <p>\r\n        Encrypting/Decrypting is done by using a letters shift to encrypt a character and then using the next shift to encrypt\r\n        the next charcter and then wrapping back to the beginning when the end of the keyword is reached. For example, the\r\n        message \"Today's weather will be bad.\"encrpyted with the keyword WEATHER will result in \"PSDTFWNAETALVNEPLULFRZ\".\r\n        Taking this step by step, t would be encrpyted by the cipheralphabet where W is first, then o by E's cipheralphabet\r\n        and so on until it reaches e which would then be encrypted using W's cipheralphabet again as we have wrapped around\r\n        after reaching the end. Decrypting is done in a similar manner, but backwards.\r\n        </p>\r\n        <h5>Encrypting/Decrypting</h5>\r\n        <CipherForm keywordId='vigenere-keyword' keywordChangeHandler={this.handleChange} inputId='vigenere-input' textChangeHandler={this.handleChange} />\r\n        <ModeButton mode={mode} modeChange={this.modeChange} />\r\n        <br/><br/>\r\n        <Output id='vigenere-output' text={output}/>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VigenereTab;\r\n","import React, {Component} from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass PlayfairSquare extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleCellChange = this.handleCellChange.bind(this);\r\n  }\r\n\r\n  handleCellChange(e) {\r\n    // TO DO\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Table responsive='sm' size='sm' striped bordered className='playfair-square'>\r\n        <tbody>\r\n          {createTableRow(this.props.square, 0, this.props.readOnly)}\r\n          {createTableRow(this.props.square, 1, this.props.readOnly)}\r\n          {createTableRow(this.props.square, 2, this.props.readOnly)}\r\n          {createTableRow(this.props.square, 3, this.props.readOnly)}\r\n          {createTableRow(this.props.square, 4, this.props.readOnly)}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\n// Helper Function for filling in the table\r\n//  square: Playfair square being used. Multidimensional array.\r\n//  row: row number to display. Integer.\r\n//  readOnly: Whether cell can be modified or not.\r\nfunction createTableRow(square, row, readOnly) {\r\n  return (\r\n    <tr key={'playfair-' + row}>\r\n      <td><Form.Control as='input' size='sm' className='center' plaintext={readOnly} readOnly={readOnly} value={square[row][0]}/></td>\r\n      <td><Form.Control as='input' size='sm' className='center' plaintext={readOnly} readOnly={readOnly} value={square[row][1]}/></td>\r\n      <td><Form.Control as='input' size='sm' className='center' plaintext={readOnly} readOnly={readOnly} value={square[row][2]}/></td>\r\n      <td><Form.Control as='input' size='sm' className='center' plaintext={readOnly} readOnly={readOnly} value={square[row][3]}/></td>\r\n      <td><Form.Control as='input' size='sm' className='center' plaintext={readOnly} readOnly={readOnly} value={square[row][4]}/></td>\r\n    </tr>\r\n  );\r\n}\r\n\r\n\r\nexport default PlayfairSquare;\r\n","import {getCipherAlphabet} from './Monoalpha';\r\n\r\n  // Performs Playfair substituion.\r\n  //  keyword: String of letters used to create new alphabets to perform substituion.\r\n  //  text: String to encrypt/decrypt.\r\n  //  mode: indicates whether to encrypt or decrypt. 0: Encrypt, 1:Decrypt\r\n  //  letterToReplace: Square can only have 25 letters, so one must be replaced. j is usually replaced by i.\r\n  //  replacement: letter that will be used as replacement.\r\n  //  @Returns:\r\n  //    output: Given text that has been substituted based on the keyword given.\r\n  function playfairCipher(keyword, text, mode=0, letterToReplace='j', replacement='i') {\r\n    let output = '';\r\n    const square = createSquare(keyword);\r\n    const hash = createHash(square);\r\n    let letters = text.toLowerCase().match(/[a-z]/g);\r\n    if (mode === 0) letters = formatText(letters); // Reformat text for encryption\r\n    if (letters.length % 2 === 0) { // Has to be even since letters are paired together to encipher/decipher\r\n      for (let i=0; i<letters.length; i+=2) {\r\n        // Perform encryption/decryption based on case.\r\n        if (hash.row[letters[i]] === hash.row[letters[i+1]]) { // Row Case\r\n          output += rowCase(square, hash.row[letters[i]], hash.col[letters[i]], hash.col[letters[i+1]], mode);\r\n        } else if (hash.col[letters[i]] === hash.col[letters[i+1]]) { // Column case\r\n          output += colCase(square, hash.col[letters[i]], hash.row[letters[i]], hash.row[letters[i+1]], mode);\r\n        } else { // Square case\r\n          output += squareCase(square, hash.row[letters[i]], hash.col[letters[i]], hash.row[letters[i+1]], hash.col[letters[i+1]]);\r\n        }\r\n      }\r\n    }\r\n    return mode ? output : output.toUpperCase();\r\n  }\r\n\r\n  // Modifies text for playfair\r\n  //  text: String to encrypt/decrypt.\r\n  //  letterToReplace: Square can only have 25 letters, so one must be replaced. j is usually replaced by i.\r\n  //  replacement: letter that will be used as replacement.\r\n  //  @Returns:\r\n  //    letters: an array of letters\r\n  function formatText(letters, letterToReplace, replacement) {\r\n    for (let i=0; i<letters.length; i+=2) {\r\n      if (letters[i] === letterToReplace) letters[i] = replacement; // See if letter need to be replaced.\r\n      if (!letters[i+1]) { // Add filler, but don't create repetitions (leads to infinite looping)\r\n        if (letters[i] === 'x') {\r\n          letters.push('z');\r\n        } else {\r\n          letters.push('x');\r\n        }\r\n      }\r\n      if (letters[i+1] === letterToReplace) letters[i+1] = replacement; // See if letter need to be replaced.\r\n      if (letters[i] === letters[i+1]) {// Need to ensure letters are not the same\r\n        if (letters[i] === 'x') {\r\n          letters.splice(i+1, 0, 'z');\r\n        } else {\r\n          letters.splice(i+1, 0, 'x');\r\n        }\r\n      }\r\n    }\r\n    return letters;\r\n  }\r\n\r\n  // Square case, when not in same row or column.\r\n  //  square: Playfair square being used. Multidimensional Array.\r\n  //  rowA: row of first letter.\r\n  //  rowB: row of second letter.\r\n  //  colA: column of first letter.\r\n  //  colB: column of second letter.\r\n  //  @Returns: Two letters encrypted/decrypted.\r\n  function squareCase(square, rowA, colA, rowB, colB) {\r\n    return (square[rowA][colB] + square[rowB][colA]);\r\n  }\r\n\r\n  // Row case, when in the same row. Encrypt go to the right one, Decrypt do to the left one.\r\n  //  square: Playfair square being used. Multidimensional Array.\r\n  //  row: row of letters.\r\n  //  colA: column of first letter.\r\n  //  colB: column of second letter.\r\n  //  mode: indicates whether to encrypt or decrypt. 0: Encrypt, 1:Decrypt\r\n  //  @Returns: Two letters encrypted/decrypted.\r\n  function rowCase(square, row, colA, colB, mode=0) {\r\n    if (mode === 0) {\r\n      (colA + 1 > 4) ? colA -= 4 : colA++;\r\n      (colB + 1 > 4) ? colB -= 4 : colB++;\r\n      return (square[row][colA] + square[row][colB]);\r\n    } else {\r\n      (colA - 1 < 0) ? colA += 4 : colA--;\r\n      (colB - 1 < 0) ? colB += 4 : colB--;\r\n      return (square[row][colA] + square[row][colB]);\r\n    }\r\n  }\r\n\r\n  // Column case, when in the same column. Encrypt go to the down one, Decrypt do to the up one.\r\n  //  square: Playfair square being used. Multidimensional Array.\r\n  //  rowA: row of first letter.\r\n  //  rowB: row of second letter.\r\n  //  col: column of letters.\r\n  //  mode: indicates whether to encrypt or decrypt. 0: Encrypt, 1:Decrypt\r\n  //  @Returns: Two letters encrypted/decrypted.\r\n  function colCase(square, col, rowA, rowB, mode=0) {\r\n    if (mode === 0) {\r\n      (rowA - 1 < 0) ? rowA += 4 : rowA--;\r\n      (rowB - 1 < 0) ? rowB += 4 : rowB--;\r\n      return (square[rowA][col] + square[rowB][col]);\r\n    } else {\r\n      (rowA + 1 > 4) ? rowA -= 4 : rowA++;\r\n      (rowB + 1 > 4) ? rowB -= 4 : rowB++;\r\n      return (square[rowA][col] + square[rowB][col]);\r\n    }\r\n  }\r\n\r\n  // Creates Plafair square based on keyword. Used keyword with letter repetitions ignored\r\n  // and add any missing letters to the end(except letterToReplace) in the order they normally\r\n  // appear.\r\n  //  keyword: string used to construct square.\r\n  //  letterToReplace: letter to ignore when creating square. Usually j.\r\n  //  @Returns:\r\n  //    square: Plafair square. Multidimensional array of single letters.\r\n  function createSquare(keyword, letterToReplace='j') {\r\n    let i // the first-order index in square\r\n      ; let j // the second order index in square\r\n      ; const square = [];\r\n    keyword = getCipherAlphabet(keyword).toLowerCase().replace(letterToReplace, ''); // Still needs to replace letter with intended replacement when encrypting\r\n    for (i=0; i<5; i++) {\r\n      square[i] = [];\r\n      for (j=0; j<5; j++) {\r\n        square[i][j] = keyword.charAt(i * 5 + j);\r\n      }\r\n    }\r\n    return square;\r\n  }\r\n\r\n  // Creates row and col hash of the letters in square.\r\n  //  square: Playfair square being used. Multidimensional array.\r\n  // @Returns:\r\n  //  hash: returns object containing rowHash and colHash.\r\n  function createHash(square) {\r\n    let i; let j; const rowHash = {}; const colHash = {};\r\n    for (i=0; i<5; i++) {\r\n      for (j=0; j<5; j++) {\r\n        rowHash[square[i][j]] = i;\r\n        colHash[square[i][j]] = j;\r\n      }\r\n    }\r\n    return {row: rowHash, col: colHash};\r\n  }\r\n\r\n  export {playfairCipher, createSquare}\r\n","import React, {Component} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport CipherForm from './CipherForm';\r\nimport ModeButton from './ModeButton';\r\nimport Output from './Output';\r\nimport PlayfairSquare from './PlayfairSquare';\r\nimport {playfairCipher, createSquare} from '../Library/Playfair';\r\n\r\nclass PlayfairTab extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.modeChange = this.modeChange.bind(this);\r\n    this.getOutput = this.getOutput.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      mode: 0,\r\n      keyword: '',\r\n    };\r\n  }\r\n\r\n  modeChange(e) {\r\n    (this.state.mode === 0) ? this.setState({mode: 1}) : this.setState({mode: 0});\r\n  }\r\n\r\n  getOutput() {\r\n    let output = '';\r\n    if (document.getElementById('playfair-input') != null && document.getElementById('playfair-keyword') != null) {\r\n      const input = document.getElementById('playfair-input').value;\r\n      const keyword = document.getElementById('playfair-keyword').value;\r\n      if (keyword.match(/[a-zA-Z]/) && input.match(/[a-zA-Z]/)) {// Won't do anything unless both have some sort of input. Make sure inputs have alphabetical components.\r\n        output = playfairCipher(keyword, input, this.state.mode);\r\n      }\r\n    }\r\n    return output;\r\n  }\r\n\r\n  handleChange(e, modeChange) {\r\n    const keyword = document.getElementById('playfair-keyword').value;\r\n    this.setState({keyword: keyword});\r\n  }\r\n\r\n  render() {\r\n    const mode = this.state.mode;\r\n    const keyword = this.state.keyword;\r\n    const output = this.getOutput();\r\n    return (\r\n      <Container>\r\n        <h1>Playfair Cipher</h1>\r\n        <p>\r\n        A Playfair cipher is digraph substitution cipher that uses a square created from a keyword.\r\n        </p>\r\n        <p>\r\n        The square is created by removing duplicates after a letter first appears and then filling in a\r\n        5x5 square left to right, top to bottom. Similar to monoalphabetic substituion any unused letters follow\r\n        after in the order they normally appear. Typically J is removed and replaced by I.\r\n        </p>\r\n        <p>\r\n        When encrypting, the text must be grouped into digraphs(group of two characters), digraphs may not\r\n        contain two of the same letters and a filler must be inserted, and if the text is uneven after this another\r\n        filler is needed at the end. When encrypting a digraph there are rules to follow to get the encrpyted characters.\r\n        Based on the square:\r\n          <ol>\r\n            <li>When not in the same row or column, slide to the left/right to other characters column.</li>\r\n            <li>When both are in the same row. Go to the right once.</li>\r\n            <li>When both are in the same column. Go down one.</li>\r\n          </ol>\r\n        Decrypting is very similar except you go left when in the same row, and go up when in the same column.\r\n        </p>\r\n        <h5>Encrypting/Decrypting</h5>\r\n        <CipherForm keywordId='playfair-keyword' keywordChangeHandler={this.handleChange} inputId='playfair-input' textChangeHandler={this.handleChange} />\r\n        <ModeButton mode={mode} modeChange={this.modeChange} />\r\n        <br/><br/>\r\n        <h3 className='center'>Table Being Used</h3>\r\n        <div id='playfair-table'>\r\n          <PlayfairSquare square={createSquare(keyword)} read_only/>\r\n        </div>\r\n        <Output id='playfair-output' text={output}/>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayfairTab;\r\n","import React, {Component} from 'react';\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\nclass Monograph extends Component {\r\n  render() {\r\n    const data = formatData(this.props.letterFreqs);\r\n    const chartOptions = {\r\n      title: {\r\n        display: true,\r\n        text: 'Monogram Frequencies',\r\n      },\r\n      scales: {\r\n        xAxes: [{\r\n          barPercentage: 0.5,\r\n          barThickness: 10,\r\n          maxBarThickness: 10,\r\n          minBarLength: 2,\r\n          gridLines: {\r\n            offsetGridLines: true,\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'Monograms',\r\n          },\r\n        }],\r\n        yAxes: [{\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: '%',\r\n          },\r\n        }],\r\n      },\r\n    };\r\n    return (\r\n      <Bar data={data} options={chartOptions} />\r\n    );\r\n  }\r\n}\r\n\r\nfunction formatData(letterFreqs) {\r\n  const freqs = [];\r\n  const count = Object.values(letterFreqs).reduce(\r\n      function(accumulator, currentValue) {\r\n        return accumulator + currentValue;\r\n      });\r\n  // Ensure all letters have at least been initialized. a-z is char codes 97-122.\r\n  for (let i=97; i<123; i++) {\r\n    if (!letterFreqs[String.fromCharCode(i)]) letterFreqs[String.fromCharCode(i)] = 0;\r\n\r\n    freqs.push(100*(letterFreqs[String.fromCharCode(i)]/count));\r\n  }\r\n  const keys = Object.keys(letterFreqs).sort(); // Alphabetical sort\r\n  return {\r\n    labels: keys,\r\n    datasets: [\r\n\t\t   {\r\n  \t\t\tlabel: 'Text Given Frequencies',\r\n  \t\t\tdata: freqs,\r\n        backgroundColor: 'rgba(25, 129, 174, 1)',\r\n        borderWidth: 1,\r\n        borderColor: '#777',\r\n        hoverBorderWidth: 2,\r\n        hoverBorderColor: '#000',\r\n\t\t  },\r\n      {\r\n        label: 'Typical Frequencies',\r\n        data:\r\n       [8.55, 1.60, 3.16, 3.87, 12.10, 2.18, 2.09, 4.96, 7.33, 0.22, 0.81, 4.21,\r\n         2.53, 7.17, 7.47, 2.07, 0.10, 6.33, 6.73, 8.94, 2.68, 1.06, 1.83, 0.19, 1.72, 0.11],\r\n        backgroundColor: 'rgba(57, 188, 1, 1)',\r\n        borderWidth: 1,\r\n        borderColor: '#777',\r\n        hoverBorderWidth: 2,\r\n        hoverBorderColor: '#000',\r\n        /*\r\nTypical Monogram frencies.\r\nA :  8.55        K :  0.81        U :  2.68\r\nB :  1.60        L :  4.21        V :  1.06\r\nC :  3.16        M :  2.53        W :  1.83\r\nD :  3.87        N :  7.17        X :  0.19\r\nE : 12.10        O :  7.47        Y :  1.72\r\nF :  2.18        P :  2.07        Z :  0.11\r\nG :  2.09        Q :  0.10\r\nH :  4.96        R :  6.33\r\nI :  7.33        S :  6.73\r\nJ :  0.22        T :  8.94\r\n*/\r\n      },\r\n\t ],\r\n  };\r\n}\r\n\r\nexport default Monograph;\r\n","import React, {Component} from 'react';\r\nimport {HorizontalBar} from 'react-chartjs-2';\r\n\r\nclass HorizontalFrequencyGraph extends Component {\r\n  render() {\r\n    const data = formatData(this.props.data);\r\n    const chartOptions = {\r\n      title: {\r\n        display: true,\r\n        text: this.props.title,\r\n      },\r\n      scales: {\r\n        xAxes: [{\r\n          barPercentage: 0.5,\r\n          barThickness: 10,\r\n          maxBarThickness: 10,\r\n          minBarLength: 2,\r\n          gridLines: {\r\n            offsetGridLines: true,\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: '%',\r\n          },\r\n        }],\r\n        yAxes: [{\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: this.props.yLabel,\r\n          },\r\n        }],\r\n      },\r\n    };\r\n    return (\r\n      <HorizontalBar data={data} options={chartOptions} />\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n *@param {data} to be formatted.\r\n *@returns {object} of formatted data.\r\n*/\r\nfunction formatData(data) {\r\n  const frequencies = [];\r\n  const count = Object.values(data).reduce(\r\n      function(accumulator, currentValue) {\r\n        return accumulator + currentValue;\r\n      });\r\n  const keys = Object.keys(data).sort(function(a, b) {\r\n    return data[b] - data[a];\r\n  }); // Sort by key value, Ascending\r\n  keys.forEach(function(item, index) {\r\n    frequencies.push(100*(data[item]/count));\r\n  }); // Fill frequncies\r\n  return {\r\n    labels: keys,\r\n    datasets: [\r\n\t\t   {\r\n  \t\t\tlabel: 'Text Given Frequencies',\r\n  \t\t\tdata: frequencies,\r\n        backgroundColor: 'rgba(25, 129, 174, 1)',\r\n        borderWidth: 1,\r\n        borderColor: '#777',\r\n        hoverBorderWidth: 2,\r\n        hoverBorderColor: '#000',\r\n\t\t  },\r\n\t ],\r\n  };\r\n}\r\n\r\nexport default HorizontalFrequencyGraph;\r\n","  // Counts frequency of letters, digraphs (two letters) and trigraphs (three letters).\r\n  //  text: string to be analyzed.\r\n  //  @Returns:\r\n  //    text: Given text that has been substituted based on the keyword given.\r\n  function letterFrequencyAnalysis(text) {\r\n    const letters = text.toLowerCase().match(/[a-z]/g); // ignore any other characters beside a-z.\r\n    const letFreq = {}; const diFreq = {}; const triFreq = {};\r\n    if (letters && letters.length > 2) {\r\n      // Loop through letters, add to hashmaps if not already and increment if already added.\r\n      for (let i=0; i<letters.length-2; i++) {\r\n            (letFreq[letters[i]]) ? letFreq[letters[i]] += 1 : letFreq[letters[i]] = 1;\r\n            (diFreq[(letters[i] + letters[i+1])]) ? diFreq[(letters[i] + letters[i+1])] += 1 : diFreq[(letters[i] + letters[i+1])] = 1;\r\n            (triFreq[(letters[i] + letters[i+1] + letters[i+2])]) ? triFreq[(letters[i] + letters[i+1] + letters[i+2])] += 1 : triFreq[(letters[i] + letters[i+1] + letters[i+2])] = 1;\r\n      }\r\n      // Get the last two letters and last digraph\r\n      const l = letters.length; // For Readability\r\n          (letFreq[letters[l-2]]) ? letFreq[letters[l-2]] += 1 : letFreq[letters[l-2]] = 1;\r\n          (letFreq[letters[l-1]]) ? letFreq[letters[l-1]] += 1 : letFreq[letters[l-1]] = 1;\r\n          (diFreq[(letters[l-2] + letters[l-1])]) ? diFreq[(letters[l-2] + letters[l-1])] += 1 : diFreq[(letters[l-2] + letters[l-1])] = 1;\r\n    }\r\n    return {monograms: letFreq, digrams: diFreq, trigrams: triFreq};\r\n  }\r\n\r\n  // Gets the frequencies for the given letters given how they are grouped.\r\n  // i.e. Every 3rd letter of 'This is an example.' would output\r\n  // [{t: 1, s: 1, a: 1, x: 1, p: 1} {h: 1, i: 1, n: 1, a: 1, l: 1} {i: 1, s: 1, e: 2, m: 1}]\r\n  //  letters: An array of alphabetical lower case characters.\r\n  //  @Returns:\r\n  //    frequencies: An array of hashmaps that contain each letter groupings frequencies.\r\n  function getIthLetterFrequencies(letters, i) {\r\n    const frequencies = [];\r\n    // Set up array of hashes\r\n    for (let j=0; j<i; j++) {\r\n      frequencies.push({}); // Need to change maybe or indexOfCoincidence method.\r\n    }\r\n\r\n    if (letters) {\r\n      for (let k=0; k<letters.length; k++) {\r\n            (frequencies[k%i][letters[k]]) ? frequencies[k%i][letters[k]] += 1 : frequencies[k%i][letters[k]] = 1;\r\n      }\r\n    }\r\n    return frequencies;\r\n  }\r\n\r\n  // Calculates the index of coincidence\r\n  //  frequencies: A hashmap comprised of lowercase alphabet characters mapped to the amount of times it appears in a given text.\r\n  //  @Returns:\r\n  //    ioc: A calculated number using the formula for ioc: https://en.wikipedia.org/wiki/Index_of_coincidence.\r\n  function indexOfCoincidence(frequencies) {\r\n    const length = Object.values(frequencies).reduce(\r\n        function(accumulator, currentValue) {\r\n          return accumulator + currentValue;\r\n        });\r\n    let ioc = 0;\r\n    // Iterate through alphabet\r\n    for (let i=0; i<26; i++) {\r\n      const current = frequencies[(10+i).toString(36)];\r\n      if (current > 0) ioc += (current * (current - 1))/(length*(length - 1));\r\n    }\r\n    return ioc;\r\n  }\r\n\r\n  // Calculates the index of coincidences for different letter pairing groups.\r\n  //  letters: an array of alphabetical lowercase letters\r\n  //  @Returns:\r\n  //    iocs: An array of calculated index of coincidences for different letter pairing groups.\r\n  function calculateIndexOfCoincidences(letters) {\r\n    const iocs = [];\r\n    for (let i=1; i<=20; i++) {\r\n      let freqs = getIthLetterFrequencies(letters, i);\r\n      freqs = freqs.map((freq) => indexOfCoincidence(freq)); // Calculate ioc for each set of text\r\n      iocs.push(freqs.reduce((accum, currentVal) => accum + currentVal)/i); // Push Average\r\n    }\r\n    return iocs;\r\n  }\r\n\r\n  export {calculateIndexOfCoincidences , letterFrequencyAnalysis}\r\n","import React, {Component} from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Monograph from './Monograph';\r\nimport HorizontalFrequencyGraph from './HorizontalFrequencyGraph';\r\nimport {letterFrequencyAnalysis} from '../Library/Tools';\r\n\r\nclass FrequencyAnalysis extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.state = {output: {}};\r\n  }\r\n\r\n  handleSubmit() {\r\n    const letterFreqs = letterFrequencyAnalysis(document.getElementById('freq-input').value);\r\n    this.setState({output: letterFreqs});\r\n  }\r\n\r\n  render() {\r\n    const monograms = this.state.output.monograms;\r\n    const digrams = this.state.output.digrams;\r\n    const trigrams = this.state.output.trigrams;\r\n    return (\r\n      <Container>\r\n        <Form>\r\n          <Form.Group controlId='freq-input'>\r\n            <Form.Label/>\r\n            <Form.Control as='textarea' rows='3' placeholder='Enter Text'/>\r\n            <Form.Text className='text-muted'>\r\n              Any characters that are not alphabetical will be ignored!\r\n            </Form.Text>\r\n          </Form.Group>\r\n        </Form>\r\n        <Button type='submit' variant='primary' onClick={this.handleSubmit}>Analyze Text</Button>\r\n        {monograms &&\r\n          <Monograph letterFreqs={monograms} />\r\n        }\r\n        {digrams &&\r\n          <HorizontalFrequencyGraph data={digrams} yLabel='Digrams' title='Digraph Frequencies' />\r\n        }\r\n        {trigrams &&\r\n          <HorizontalFrequencyGraph data={trigrams} yLabel='Trigrams' title='Trigraph Frequencies' />\r\n        }\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FrequencyAnalysis;\r\n","import React, {Component} from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Container from 'react-bootstrap/Container';\r\nimport {calculateIndexOfCoincidences} from '../Library/Tools';\r\n\r\nclass IOC extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.state = {output: []};\r\n  }\r\n\r\n  handleSubmit() {\r\n    let iocs = ['Sorry not enough characters. Need at least 40 characters.']; // Default is an error message.\r\n    const text = document.getElementById('ioc-input').value;\r\n    const letters = text ? text.toLowerCase().match(/[a-z]/g) : null;\r\n\r\n    if (letters && letters.length >= 40) iocs = calculateIndexOfCoincidences(letters);\r\n    this.setState({output: iocs});\r\n  }\r\n\r\n  render() {\r\n    const iocDiffs = {};\r\n    let sortedLengths = [];\r\n    const iocs = this.state.output;\r\n    iocs.forEach((ioc, index) =>\r\n      iocDiffs[index] = Math.abs(0.0667 - ioc)\r\n    );\r\n    if (iocDiffs) {\r\n      sortedLengths = Object.keys(iocDiffs).sort(function(a, b) {\r\n        return iocDiffs[a] - iocDiffs[b];\r\n      });\r\n    }\r\n\r\n    const output = this.state.output.map((ioc, length) =>\r\n      <ListGroup.Item>Length:{length + 1}  IoC: {ioc}  Difference: ±{iocDiffs[length]}</ListGroup.Item>\r\n    );\r\n    // TO DO: Display list of IOCs ordered by IOC - 0.0667\r\n    return (\r\n      <Container>\r\n        <Form>\r\n          <Form.Group controlId='ioc-input'>\r\n            <Form.Label/>\r\n            <Form.Control as='textarea' rows='3' placeholder='Enter Text'/>\r\n            <Form.Text className='text-muted'>\r\n              Any characters that are not alphabetical will be ignored!\r\n            </Form.Text>\r\n          </Form.Group>\r\n        </Form>\r\n        <Button type='submit' variant='primary' onClick={this.handleSubmit}>Calculate Likely Key-Lengths</Button>\r\n        <ListGroup>{output}</ListGroup>\r\n        {sortedLengths &&\r\n          <p>Sorted List of Lengths Closest to Normal English IoC: {sortedLengths}</p>\r\n        }\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IOC;\r\n","import React, {Component} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport FrequencyAnalysis from './FrequencyAnalysis';\r\nimport IOC from './IOC';\r\n\r\nclass ToolsTab extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>Tools</h1>\r\n        <p>\r\n        These are tools that can help when attempting to decrypt a message.\r\n        </p>\r\n        <h5>Frequency Analysis</h5>\r\n        <p>\r\n        Frequency analysis will provide the frequencies of a letter's appearance\r\n        and the frequencies of the digraphs(two letter combinations) and trigraphs\r\n        (three letter combinations).\r\n        </p>\r\n        <h5>Index Of Coincidence</h5>\r\n        <p>\r\n        Index of coincidence is a technique used for cryptanalzing a\r\n        Vigenere cipher. You can learn more about it&nbsp;<a href='https://en.wikipedia.org/wiki/Index_of_coincidence'>here</a>.\r\n        The expected Index of coincidence of english is 0.0667.\r\n        </p>\r\n        <Accordion>\r\n          <Card>\r\n            <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n              Frequency Analysis\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body><FrequencyAnalysis /></Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Accordion.Toggle as={Card.Header} eventKey=\"1\">\r\n              Index Of Coincidence\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"1\">\r\n              <Card.Body><IOC /></Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToolsTab;\r\n","import React, {Component} from 'react';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport HomeTab from './HomeTab';\r\nimport CaesarTab from './CaesarTab';\r\nimport MonoalphaTab from './MonoalphaTab';\r\nimport VigenereTab from './VigenereTab';\r\nimport PlayfairTab from './PlayfairTab';\r\nimport ToolsTab from './ToolsTab';\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Tabs defaultActiveKey='home' id='tab'>\r\n          <Tab eventKey='home' title='Home'>\r\n            <HomeTab />\r\n          </Tab>\r\n          <Tab eventKey='caesar' title='Caesar'>\r\n            <CaesarTab />\r\n          </Tab>\r\n          <Tab eventKey='monoalpha' title='Monoalphabetic'>\r\n            <MonoalphaTab />\r\n          </Tab>\r\n          <Tab eventKey='vigenere' title='Vigenere'>\r\n            <VigenereTab />\r\n          </Tab>\r\n          <Tab eventKey='playfair' title='Playfair'>\r\n            <PlayfairTab />\r\n          </Tab>\r\n          <Tab eventKey='tools' title='Tools'>\r\n            <ToolsTab />\r\n          </Tab>\r\n        </Tabs>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport Navbar from \"./Components/Navbar\"\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render(props) {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}